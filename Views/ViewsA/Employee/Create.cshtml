@model Khareedo.Models.AdminUsers

@{
    ViewBag.Title = "Empleado";
    ViewBag.SubTitle = "Detalles"; 
    Layout = "~/Views/ViewsA/shared/_Layout.cshtml";
    var userRole = ViewBag.UserRole as int? ?? 0; // Obtén el rol del usuario desde ViewBag
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.Label("Nombre", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Apellido", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Edad", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Salario, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Salario, "{0:C}", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Salario)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Gender,
                                      new SelectList(new List<Object>
                                      {
                                          new { Value = "Masculino", Text = "Masculino" },
                                          new { Value = "Femenino", Text = "Femenino" },
                                          new { Value = "Otro", Text = "Otro" }
                                      }, "Value", "Text"),
                                      "Seleccione un género",
                                      htmlAttributes: new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Correo Electrónico", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Dirección", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">
                Teléfono
            </label>
            <div class="col-md-10">
                <input id="Phone" name="Phone" type="text" placeholder="Ingrese su Teléfono" class="form-control form-input"
                       pattern="[0-9]{8}" title="El teléfono debe contener exactamente 8 números" required>
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">
                Teléfono Alternativo
            </label>
            <div class="col-md-10">
                <input id="Mobile" name="Mobile" type="text" placeholder="Ingrese su Teléfono" class="form-control form-input"
                       pattern="[0-9]{8}" title="El teléfono debe contener exactamente 8 números" required>
                @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Nombre de Usuario", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Contraseña</label>
            <div class="col-md-10">
                <input id="Password" name="Password" type="text" placeholder="Contraseña" class="form-control"
                       pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}"
                       title="La contraseña debe contener al menos 8 caracteres, incluyendo al menos una letra mayúscula, una letra minúscula, un número y un carácter especial."
                       required>
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (userRole == 1) // Verifica si el rol del usuario es 1
        {
            <div class="form-group">
                @Html.Label("Rol", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.RoleType,
                                          new SelectList(new List<Object>
                                          {
                                              new { Value = 0, Text = "Empleado" },
                                              new { Value = 1, Text = "Administrador" }
                                          }, "Value", "Text"),
                                          "Seleccione un rol",
                                          htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RoleType, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Crear" class="btn btn-info" />
            </div>
        </div>
    </div>
}

<div>
    <a href="@Url.Action("Index")" class="btn btn-primary">Volver</a>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        var inputs = document.querySelectorAll('.form-input');

        inputs.forEach(function (input) {
            input.addEventListener('blur', function () {
                if (!this.classList.contains('exempt-validation') && this.value.trim() === '' && !this.classList.contains('error')) {
                    this.setCustomValidity('Por favor ingresar ' + this.getAttribute('placeholder').toLowerCase());
                } else {
                    this.setCustomValidity('');
                }
            });
        });
    });
</script>
